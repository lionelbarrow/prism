require 'spec_helper'

class TestClass
  def invoke_a_method
  end

  def invoke_bad_method
  end
end

class BadFilter
  def allow?(line)
    line[/bad_method/].nil?
  end
end

describe StackTraceGenerator do
  describe "enable!" do
    it "turns on the trace function" do
      object = TestClass.new
      tracer = StackTraceGenerator.new

      tracer.enable!
      object.invoke_a_method

      tracer.disable!
      tracer.stack_frames.should_not be_empty
    end
  end

  describe "disable!" do
    it "disables the trace function" do
      object = TestClass.new
      tracer = StackTraceGenerator.new
      tracer.enable!
      object.invoke_a_method

      tracer.disable!
      current_stack_size = tracer.stack_frames.length
      object.invoke_a_method

      tracer.stack_frames.length.should == current_stack_size
    end
  end

  describe "stack_trace" do
    it "produces a log of events generated by a method call" do
      tracer = StackTraceGenerator.new
      object = TestClass.new

      stack_trace = tracer.stack_trace { object.invoke_a_method }

      stack_trace.any? { |line| ! line[/invoke_a_method/].nil? }.should be_true
    end

    it "applies filters to the stack trace" do
      tracer = StackTraceGenerator.new
      tracer.add_filter(BadFilter.new)
      object = TestClass.new

      stack_trace = tracer.stack_trace { object.invoke_bad_method }

      stack_trace.all? { |line| line[/bad_method/].nil? }.should be_true
    end
  end

  describe "add_filter" do
    it "adds the filter to the tracer" do
      tracer = StackTraceGenerator.new
      tracer.filters.should be_empty

      tracer.add_filter(BadFilter.new)

      tracer.filters.length.should == 1
    end
  end
end
